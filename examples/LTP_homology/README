LTP Homology Example
-----------------------
The LTP clustering example requires 3 R scripts (pdb_align_hom.r, LTP_esd_clust.r, and chimera_images.r), 
to perform structure alignment, electrostatic similarity distance (ESD) clustering, and electrostatic potential 
visualization of 20 LT/LTP-like proteins. We have published an analysis similar to this example in the Journal 
of Experimental Botany:

	Chae K., et al. (2010) A multifaceted study of stigma/style cysteine-rich adhesin (SCA)-like 
	Arabidopsis lipid transfer proteins (LTPs) suggests diversified roles for these LTPs in plant 
	growth and reproduction. J Exp Bot vol. 61 (15) pp. 4277-4290

Each script should be ran using the R environment. After opening the R environment [simply run the command R in
the terminal] first check the working directory using the command getwd(). Then be sure to navigate to the 
LTP_example directory using setwd() [eg. setwd("/Users/ckieslich/aesop-1.0.0/examples/LTP_homology")]. The 3 scripts 
should be ran in the order discussed, and can be executed using the command source("NAME") [eg. source("pdb_align_hom.r")].   

(i)    pdb_align_hom.r  - The first step in performing the ESD clustering is to superimpose the 20 LTP structures
in order to ensure that all potentials will be properly aligned when performing the APBS calculations. The Bio3D 
package has a couple tools for superimposing protein structures depending on if the structures contain the same 
sequence. Since the 20 LTP structures contain a different sequences, a sequence alignment for all 20 LTPs needs to 
first be performed to determine which atoms to use in superposition. For this script to work, MUSCLE must first be 
installed and within your PATH. To run this script one needs to simply provide the path to the directory containing 
the PDB files to be superimposed, the name of the PDB to which all other structures should be fitted, and the name 
of the directory to which the fitted PDBs should be saved.    

(ii)   LTP_esd_clust.r  - This script does the bulk of the work for the ESD clustering analysis, from generating PQR 
and electrostatic potential (DX) files, as well as generating the ESD distance matrix and performing hierarchical 
clustering. Only a few inputs are needing to run the analysis, and these are:
	
	1) pdb.dir   = Name of the directory that contains the PDB files (should already be superimposed) to be used
	2) cent.on   = Root name of the PDB structure to which all calculations should be centered. This should be the
				   same structure to which all other structures have been superimposed. 1MZL has been chosen here
				   since it was the template used to generate the homology models used in this example.
	3) proj_name = Name of the project which will be used in generating names for output files and directories

In addition to these inputs other parameters can also be changed if desired, but default parameters are supplied. The
first parameter that may be of interest is the force field (ff argument of batch.pqr) that is used in the generation 
of PQR files. The default for AESOP is CHARMM, since this has been optimized for electrostatic calculations. However, 
other force fields such as AMBER and PARSE are available (for more details see: 
http://www.poissonboltzmann.org/pdb2pqr/user-guide/using-pdb2pqr). 

The next set of parameters that should be considered are the input parameters for electrostatic potential calculations
performed by APBS. By default, AESOP currently uses the psize.py utility provided by APBS to determine the number of 
grid points to use and the needed grid lengths. These parameters can be changed manually by changing the dime, fglen, 
and cglen in the apbsin.solv object. Also, by default the fglen is set to the cglen provided by psize, since for 
clustering it is preferred to have the fglen and cglen to be equal. In this AESOP example the parameters are set by the 
function apbsin.solv(), which uses the following default values for APBS keywords:     

APBS Defalut Parameters (Solvated state)
-----------------------------------------
	lpbe
	bcfl sdh
	srfm smol
	chgm spl2
	ion 1 0.150 2.0
	ion -1 0.150 2.0
	pdie  20.0
	sdie  78.54
	sdens  10.0
	srad  0.0
	swin  0.3
	temp  298.15
	
	For more details, regarding the possible keywords and their meaning please visit: 
	http://www.poissonboltzmann.org/apbs/user-guide/running-apbs/input-files/elec-input-file-section/elec-keywords

In this example, the only APBS parameters that have been changed from their default value are the concentrations of the
two ion species, which have been changed from 150 mM to 50mM, since a 50 mM ionic strength was used in experiments for
these plant proteins. The ion concentrations are changed in the APBS input by using the s.keys option of the apbsin.solv
function (see line 26 of LTP_esd_clust.r for an example). Similar syntax can be used to change any of the apbs parameters,
as long as you know the keyword you want to change. The ESD used in this example is AWD (a.k.a AND). The outputs of this 
script include a directory of PQR files, a directory of DX files, an image of the ESD dendrogram, and a R binary file 
(.dat file) containing all of the objects generated in this AESOP analysis. This file, and therefore these objects, can 
be loaded for later use using the R load() function. 

(iii)  chimera_images.r - The final step of this example is the generation of isopotential contours to visualize the 
generated electrostatic potentials. The generated images will have a 3D contour representing the distribution of 
negative (red) and positive (blue) potential, for an isovalue of +/- 1 kT/e. If there are holes in the contours, this 
isn't necessarily an error but indicates that the +/- 1 kT/e contours may continue outside the used grid lengths. To 
make images without holes simply change the -1/1 in the volume line to a higher integer, indicating a higher isovalue.
In some cases if all generated potentials contain holes at 1 kT/e, it may be useful to reperform the clustering with
larger grid lengths (fglen,cglen in the apbsin.solv object). Four images for each DX file will be generated representing 
4 rotations about the y-axis.  
